name: Android CI/CD

# Eventos que disparan el workflow
on:
  push:
    branches:
      - main  # Se ejecuta cuando se hace push a la rama 'main'
      - develop # Puedes añadir otras ramas como 'develop' o 'feature/*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Permite disparar el workflow manualmente desde la interfaz de GitHub

jobs:
  build_android_apk:
    # El runner donde se ejecutará este job. Ubuntu es común para Android.
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout Code
        uses: actions/checkout@v4 # Usa la acción oficial de GitHub para clonar el repositorio

      # Paso 2: Configurar Java (esencial para Android)
      # Ajusta la versión de Java según las necesidades de tu proyecto (ej. '11' o '17')
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # O 'adopt', 'zulu', etc.
          java-version: '17'
          cache: 'gradle' # Caching para las dependencias de Gradle

      # Paso 3: Configurar Node.js (si usas React Native)
      # Si tu proyecto es nativo de Android o Flutter, puedes omitir este paso
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Ajusta la versión de Node.js
          cache: 'npm' # O 'yarn' si usas yarn

      # Paso 4: Instalar dependencias (si usas React Native o Flutter)
      # Si tu proyecto es nativo de Android, este paso no es necesario aquí.
      - name: Install dependencies (React Native/Flutter)
        # Ajusta el comando según tu gestor de paquetes (npm install o yarn install)
        # Si es Flutter, aquí iría 'flutter pub get' en el directorio de tu proyecto Flutter
        run: |
          npm install # o yarn install

      # Paso 5: Configurar la ruta del SDK de Android
      # Asegura que el SDK de Android esté disponible para Gradle
      - name: Set up Android SDK
        run: |
          echo "sdk.dir=$HOME/Library/Android/sdk" >> "$GITHUB_WORKSPACE/android/local.properties"
        # Nota: La ruta por defecto de GitHub Actions ya tiene el SDK.
        # Este paso es más para proyectos que requieren 'local.properties' explícitamente.
        # Para muchos proyectos, este paso puede ser omitido o solo necesitas asegurar
        # que $ANDROID_HOME esté configurado, lo cual setup-java a menudo ya hace.

      # Paso 6: Configurar las credenciales de firma (MUY IMPORTANTE para APKs de Release)
      # Esto solo es necesario si quieres generar un APK firmado para publicación.
      # Para debug APKs, puedes omitir este paso y los pasos de firma en Gradle.
      - name: Set up Keystore and signing properties
        if: github.ref == 'refs/heads/main' # Solo ejecuta esto para la rama principal (release)
        env:
          # Estas variables de entorno deben ser Secrets de GitHub
          # Más detalles sobre cómo configurarlos abajo en "Firma del APK".
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Decodificar el archivo keystore base64 y guardarlo
          echo "$KEYSTORE_BASE64" | base64 --decode > "$GITHUB_WORKSPACE/android/app/upload-keystore.jks"

          # Crear el archivo keystore.properties (o signing.properties) para Gradle
          # Este archivo contiene las credenciales de firma que Gradle usará.
          echo "storeFile=upload-keystore.jks" > "$GITHUB_WORKSPACE/android/key.properties"
          echo "storePassword=$KEYSTORE_PASSWORD" >> "$GITHUB_WORKSPACE/android/key.properties"
          echo "keyAlias=$KEY_ALIAS" >> "$GITHUB_WORKSPACE/android/key.properties"
          echo "keyPassword=$KEY_PASSWORD" >> "$GITHUB_WORKSPACE/android/key.properties"
          # Asegúrate de que tu build.gradle (app) o build.gradle.kts (app) hace referencia a este archivo
          # Por ejemplo, en build.gradle (app):
          # android {
          #     ...
          #     signingConfigs {
          #         release {
          #             if (project.hasProperty('keyStore') && file(project.property('keyStore')).exists()) {
          #                 storeFile file(project.property('keyStore'))
          #                 storePassword project.property('keyStorePassword')
          #                 keyAlias project.property('keyAlias')
          #                 keyPassword project.property('keyPassword')
          #             }
          #         }
          #     }
          #     buildTypes {
          #         release {
          #             signingConfig signingConfigs.release
          #             ...
          #         }
          #     }
          # }
          # y en tu archivo gradle.properties global (NO el de tu proyecto):
          # keyStore=path/to/key.properties (esto se maneja con la creación de key.properties aquí)
          # Esto requiere que tu build.gradle esté configurado para leer estos properties.

      # Paso 7: Dar permisos de ejecución a Gradle Wrapper
      - name: Grant execute permission for gradlew
        run: chmod +x ./android/gradlew

      # Paso 8: Construir el APK
      # Ajusta el comando según tu framework/proyecto:
      # - React Native: cd android && ./gradlew assembleRelease
      # - Flutter: flutter build apk --release
      # - Android Nativo: ./gradlew assembleRelease
      - name: Build Android Release APK
        run: |
          cd android
          ./gradlew assembleRelease # Para release APK (firmado si configuraste el Paso 6)
          # O para un APK de debug:
          # ./gradlew assembleDebug

      # Paso 9: Subir el APK como un artefacto de GitHub Actions
      # Esto permite descargar el APK desde la interfaz de GitHub Actions.
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk # Ruta al APK generado
          # O si es de debug:
          # path: android/app/build/outputs/apk/debug/app-debug.apk